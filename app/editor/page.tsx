"use client";

import React, {
  useState,
  useEffect,
  useRef,
  ChangeEvent,
  FocusEvent,
} from "react";
import dynamic from "next/dynamic";
import ProtectedRoute from "../../components/protectedRoute";

import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { Textarea } from "@/components/ui/textarea";

import {
  SunIcon,
  MoonIcon,
  ArrowPathIcon,
  ArrowUturnLeftIcon,
  ArrowUturnRightIcon,
  ShareIcon,
  DocumentArrowDownIcon,
  BoltIcon,
  PlayIcon,
} from "@heroicons/react/24/outline";

const MonacoEditor = dynamic(() => import("@monaco-editor/react"), {
  ssr: false,
});

const tutorials = [
  {
    title: "Getting Started 🚀",
    content:
      "Type some HTML, CSS, or JS code in the editor and see the preview live. Have fun coding!",
  },
  {
    title: "AI Code Generation 🤖",
    content:
      "Enter a prompt for AI code generation and append it to your code. Let's get those robots to help!",
  },
  {
    title: "Export & Share 🎉",
    content:
      "Export your code as an HTML file or share a magical link with your masterpiece embedded.",
  },
];

export default function CodeEditor() {
  const [code, setCode] = useState(
    () => localStorage.getItem("code") || "<!-- Start coding here -->"
  );
  const [darkMode, setDarkMode] = useState(
    () => localStorage.getItem("theme") === "dark"
  );
  const [showAI, setShowAI] = useState(() =>
    JSON.parse(localStorage.getItem("showAI") ?? "true")
  );
  const [showPreview, setShowPreview] = useState(() =>
    JSON.parse(localStorage.getItem("showPreview") ?? "true")
  );
  const [showOutput, setShowOutput] = useState(() =>
    JSON.parse(localStorage.getItem("showOutput") ?? "false")
  );
  const [showTutorials, setShowTutorials] = useState(() =>
    JSON.parse(localStorage.getItem("showTutorials") ?? "false")
  );

  const [aiOutput, setAiOutput] = useState("");
  const [prompt, setPrompt] = useState("");
  const [loading, setLoading] = useState(false);

  const editorRef = useRef<any>(null);
  const iframeRef = useRef<HTMLIFrameElement>(null);
  const promptRef = useRef<HTMLTextAreaElement>(null);

  useEffect(() => {
    if (!iframeRef.current) return;
    const doc =
      iframeRef.current.contentDocument ||
      (iframeRef.current.contentWindow
        ? iframeRef.current.contentWindow.document
        : null);
    if (doc) {
      doc.open();
      doc.write(code);
      doc.close();
    }
  }, [code]);

  useEffect(() => {
    localStorage.setItem("code", code);
  }, [code]);

  useEffect(() => {
    localStorage.setItem("theme", darkMode ? "dark" : "light");
  }, [darkMode]);

  useEffect(() => {
    localStorage.setItem("showAI", JSON.stringify(showAI));
  }, [showAI]);

  useEffect(() => {
    localStorage.setItem("showPreview", JSON.stringify(showPreview));
  }, [showPreview]);

  useEffect(() => {
    localStorage.setItem("showOutput", JSON.stringify(showOutput));
  }, [showOutput]);

  useEffect(() => {
    localStorage.setItem("showTutorials", JSON.stringify(showTutorials));
  }, [showTutorials]);

  useEffect(() => {
    try {
      const params = new URLSearchParams(window.location.search);
      const codeParam = params.get("code");
      if (codeParam) {
        const decoded = atob(codeParam);
        setCode(decoded);
      }
    } catch {}
  }, []);

  function handleEditorDidMount(
    editor: import("monaco-editor").editor.IStandaloneCodeEditor
  ) {
    editorRef.current = editor;
  }

  function undo() {
    editorRef.current?.trigger("keyboard", "undo", null);
  }

  function redo() {
    editorRef.current?.trigger("keyboard", "redo", null);
  }

  function format() {
    editorRef.current?.getAction("editor.action.formatDocument").run();
  }

  function exportCode() {
    const blob = new Blob([code], { type: "text/html" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "code.html";
    a.click();
    URL.revokeObjectURL(url);
  }

  function share() {
    try {
      const encoded = btoa(code);
      const url = `${window.location.origin}${window.location.pathname}?code=${encoded}`;
      navigator.clipboard.writeText(url);
      alert("✨ Shareable link copied to clipboard! ✨");
    } catch {
      alert("Oops! Failed to create shareable link.");
    }
  }

  async function generateAI() {
    if (!prompt.trim()) return alert("Please enter a prompt, silly!");
    setLoading(true);
    setAiOutput("");
    try {
      await new Promise((r) => setTimeout(r, 1500));
      const fakeResponse = `<!-- 🤖 AI generated snippet for: ${prompt} -->\n<div>\n  <p>This code was magically generated by AI based on your prompt.</p>\n</div>`;
      setAiOutput(fakeResponse);
    } catch {
      setAiOutput("😵‍💫 Error generating AI code. Try again!");
    } finally {
      setLoading(false);
    }
  }

  function appendAIOutput() {
    setCode((prev) => prev + "\n\n" + aiOutput);
    setAiOutput("");
    setPrompt("");
    promptRef.current?.blur();
  }

  function handlePromptFocus(e: FocusEvent<HTMLTextAreaElement>) {
    e.target.select();
  }

  const panelWidth = "33%";

  return (
    <ProtectedRoute>
      <div
        className={`flex flex-col h-screen ${
          darkMode ? "bg-gray-900 text-gray-100" : "bg-gray-50 text-gray-900"
        }`}
      >
        <header
          className={`flex items-center justify-between p-4 border-b ${
            darkMode ? "border-gray-700" : "border-gray-300"
          }`}
        >
          <h1 className="text-3xl font-extrabold tracking-tight flex items-center gap-2">
            <PlayIcon className="w-8 h-8 text-blue-500 animate-pulse" />
            Code Playground 🎮
          </h1>
          <div className="flex flex-wrap gap-2 items-center">
            <Button
              variant="outline"
              onClick={() => setDarkMode((d) => !d)}
              aria-label="Toggle dark mode"
              className="flex items-center gap-1"
            >
              {darkMode ? (
                <>
                  <SunIcon className="w-5 h-5" />
                  Light Mode
                </>
              ) : (
                <>
                  <MoonIcon className="w-5 h-5" />
                  Dark Mode
                </>
              )}
            </Button>
            <Button
              variant="ghost"
              onClick={undo}
              aria-label="Undo"
              className="flex items-center gap-1"
            >
              <ArrowUturnLeftIcon className="w-5 h-5" />
              Undo
            </Button>
            <Button
              variant="ghost"
              onClick={redo}
              aria-label="Redo"
              className="flex items-center gap-1"
            >
              <ArrowUturnRightIcon className="w-5 h-5" />
              Redo
            </Button>
            <Button
              variant="ghost"
              onClick={format}
              aria-label="Format Code"
              className="flex items-center gap-1"
            >
              <ArrowPathIcon className="w-5 h-5" />
              Format
            </Button>
            <Button
              variant="ghost"
              onClick={exportCode}
              aria-label="Export Code"
              className="flex items-center gap-1"
            >
              <DocumentArrowDownIcon className="w-5 h-5" />
              Export
            </Button>
            <Button
              variant="ghost"
              onClick={share}
              aria-label="Share Code"
              className="flex items-center gap-1"
            >
              <ShareIcon className="w-5 h-5" />
              Share
            </Button>
          </div>
        </header>

        <main className="flex flex-grow overflow-hidden">
          {/* Editor panel */}
          <section
            style={{ width: panelWidth }}
            className={`border-r ${
              darkMode ? "border-gray-700" : "border-gray-300"
            }`}
          >
            <MonacoEditor
              language="html"
              theme={darkMode ? "vs-dark" : "vs-light"}
              value={code}
              onChange={(v) => setCode(v || "")}
              onMount={handleEditorDidMount}
              options={{
                minimap: { enabled: false },
                fontSize: 16,
                wordWrap: "on",
                automaticLayout: true,
              }}
              height="100%"
              width="100%"
            />
          </section>

          {/* Preview & AI panel */}
          <section
            style={{ width: panelWidth }}
            className="flex flex-col border-r border-gray-300"
          >
            <div className="flex items-center justify-between p-3 border-b">
              <h2 className="text-xl font-semibold flex items-center gap-2">
                <BoltIcon className="w-6 h-6 text-purple-500" />
                AI Code Generator
              </h2>
              <Checkbox
                checked={showAI}
                onCheckedChange={(checked) => setShowAI(!!checked)}
                aria-label="Toggle AI Generator panel"
              />
            </div>

            {showAI && (
              <div className="flex flex-col p-3 space-y-2 h-full overflow-auto">
                <Textarea
                  ref={promptRef}
                  placeholder="Ask AI for code help, e.g. 'Create a cool button' 🎨"
                  value={prompt}
                  onChange={(e: ChangeEvent<HTMLTextAreaElement>) =>
                    setPrompt(e.target.value)
                  }
                  onFocus={handlePromptFocus}
                  className="resize-none"
                  rows={4}
                />
                <Button
                  onClick={generateAI}
                  disabled={loading}
                  variant="default"
                  className="flex items-center gap-2 justify-center"
                >
                  {loading ? (
                    <ArrowPathIcon className="w-5 h-5 animate-spin" />
                  ) : (
                    <>
                      <BoltIcon className="w-5 h-5" />
                      Generate AI Code
                    </>
                  )}
                </Button>
                {aiOutput && (
                  <>
                    <pre
                      className={`whitespace-pre-wrap p-2 rounded border ${
                        darkMode
                          ? "bg-gray-800 border-gray-700"
                          : "bg-gray-100 border-gray-300"
                      }`}
                    >
                      {aiOutput}
                    </pre>
                    <Button
                      variant="outline"
                      onClick={appendAIOutput}
                      className="flex items-center gap-2"
                    >
                      <ArrowPathIcon className="w-5 h-5" />
                      Append to Editor
                    </Button>
                  </>
                )}
              </div>
            )}
          </section>

          {/* Preview panel */}
          <section style={{ width: panelWidth }} className="relative">
            <div className="p-3 border-b flex items-center justify-between">
              <h2 className="text-xl font-semibold flex items-center gap-2">
                <PlayIcon className="w-6 h-6 text-green-500" />
                Live Preview
              </h2>
              <Checkbox
                checked={showPreview}
                onCheckedChange={(checked) => setShowPreview(!!checked)}
                aria-label="Toggle live preview"
              />
            </div>
            {showPreview && (
              <iframe
                ref={iframeRef}
                title="live preview"
                sandbox="allow-scripts allow-same-origin"
                className="w-full h-full"
              />
            )}
          </section>
        </main>

        <footer className="p-2 text-center text-sm text-gray-500">
          Made with 💙 and a sprinkle of AI magic! ✨
        </footer>
      </div>
    </ProtectedRoute>
  );
}
